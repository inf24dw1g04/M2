openapi: 3.0.0
info:
  title: Event Management API
  description: "API for managing events, organizers, tickets, and participants."
  contact:
    name: Group 04
    email: my.student.email@institution.country
  version: 1.0.0
servers:
- url: http://localhost:3000
  description: Localhost API Server
  variables:
    basePath:
      default: /
paths:




# ----- ORGANIZER -----

  /organizers:

# ----- ORGANIZER GET -----
    get:
      tags:
      - Organizers
      summary: Retrieve a list of organizers
      operationId: organizersGET
      responses:
        "200":
          description: A list of organizers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organizer'
      x-swagger-router-controller: Organizers

# ----- ORGANIZER POST ----- 

    post:
      tags:
      - Organizers
      summary: Create a new organizer
      operationId: organizersPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organizer'
        required: true
      responses:
        "201":
          description: The organizer was created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organizer'
      x-swagger-router-controller: Organizers




# ----------------------------------------------------------------------- EVENTS --------------------------------------------------------------------------------

  /events:

# ----- EVENTS GET ----- 

    get:
      tags:
      - Events
      summary: Retrieve a list of events
      operationId: eventsGET
      responses:
        "200":
          description: A list of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
      x-swagger-router-controller: Events

# ----- EVENTS POST ----- 

    post:
      tags:
      - Events
      summary: Create a new event
      operationId: eventsPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        "201":
          description: The event was created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
      x-swagger-router-controller: Events

  # ----- EVENTS GET SPECIFIC ----- 
     
  /events/{eventId}:
    get:
      tags:
        - Events
      summary: Retrieve a specific event
      operationId: eventsEventIdGET
      parameters:
        - name: eventId
          in: path
          description: ID of the event to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: The requested event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        "404":
          description: Event not found
        "500":
          description: Internal server error
      x-swagger-router-controller: Events

    # ----- EVENTS PUT SPECIFIC ----- 

    put:
      tags:
      - Events
      summary: Update an existing event
      operationId: updateEventById
      parameters:
      - name: eventId
        in: path
        description: ID of the event to update
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: The details of the event to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        "200":
          description: The event was updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        "400":
          description: Invalid request data or parameters
        "404":
          description: Event not found
        "500":
          description: Internal server error
      x-swagger-router-controller: Events

    # ----- EVENTS DELETE SPECIFIC ----- 

    delete:
      tags:
      - Events
      summary: Delete an event
      operationId: deleteEventById
      parameters:
      - name: eventId
        in: path
        description: ID of the event to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: Event deleted successfully
        "400":
          description: Invalid request data or parameters
        "404":
          description: Event not found
        "500":
          description: Internal server error
      x-swagger-router-controller: Events


# ----------------------------------------------------------------------- TICKET --------------------------------------------------------------------------------

  /tickets:

  # ----- TICKET GET ----- 
    get:
      tags:
      - Tickets
      summary: Retrieve a list of tickets
      operationId: ticketsGET
      responses:
        "200":
          description: A list of tickets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ticket'
      x-swagger-router-controller: Tickets

    # ----- TICKET POST ----- 
    post:
      tags:
      - Tickets
      summary: Create a new ticket
      operationId: ticketsPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ticket'
        required: true
      responses:
        "201":
          description: The ticket was created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
      x-swagger-router-controller: Tickets

      # ----- TICKET SPECIFIC -----

  /tickets/event/{eventId}:
    get:
      tags:
        - Tickets
      summary: Retrieve tickets for a specific event
      operationId: ticketsEventEventIdGET
      parameters:
        - name: eventId
          in: path
          description: ID of the event to retrieve tickets for
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: The tickets for the specified event
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ticket'
        "404":
          description: No tickets found for the given event ID
        "500":
          description: Internal server error
      x-swagger-router-controller: Tickets

  # ----- PARTICIPANT -----

  /participants:

# ----- PARTICIPANT GET -----
    get:
      tags:
      - Participants
      summary: Retrieve a list of participants
      operationId: participantsGET
      responses:
        "200":
          description: A list of participants
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Participant'
      x-swagger-router-controller: Participants

# ----- PARTICIPANT POST -----

    post:
      tags:
      - Participants
      summary: Create a new participant
      operationId: participantsPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Participant'
        required: true
      responses:
        "201":
          description: The participant was created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Participant'
      x-swagger-router-controller: Participants



components:
  schemas:
    Organizer:
      title: Organizer
      required:
      - email
      - name
      - phone
      type: object
      properties:
        organizerId:
          type: integer
          format: int64
        name:
          type: string
          maxLength: 100 # Limita o comprimento se necessário
        email:
          type: string
          format: email # Garante que seja um email válido
        phone:
          type: string
          pattern: "^\\+\\d{1,3}\\d{9}$" # Validação para números de telefone no formato internacional
      example:
        organizerId: 0
        name: Festas Com Cor Setubal
        email: festascomcor.setubal@example.com
        phone: "+351910000000"
        
    Event:
      title: Event
      required:
      - date
      - description
      - time
      - location
      - organizerId
      - title
      type: object
      properties:
        eventId:
          type: integer
          format: int64
        title:
          type: string
          maxLength: 255 # Adiciona uma validação opcional para o tamanho do título
        description:
          type: string
          maxLength: 1000 # Adiciona um limite para descrição, ajustável conforme necessário
        date:
          type: string
          format: date # ISO 8601: YYYY-MM-DD
        time:
          type: string
          format: time # ISO 8601: HH:MM:SS
        location:
          type: string
          maxLength: 500 # Ajuste o limite conforme o campo de localização
        organizerId:
          type: integer
          format: int64
      example:
        eventId: 0
        date: "2000-01-23"
        time: "00:00:00"
        title: "Event Title"
        organizerId: 6
        location: "Event Location"
        description: "Event Description"

    Ticket:
      title: Ticket
      required:
      - eventId
      - price
      - type_ticket
      type: object
      properties:
        ticketId:
          type: integer
          format: int64
        type_ticket:
          type: string
          enum:
          - normal
          - VIP
          - premium
        price:
          type: number
          format: float
          minimum: 0 # Adiciona validação para evitar preços negativos
        eventId:
          type: integer
          format: int64
      example:
        ticketId: 1
        type_ticket: "normal"
        price: 20.00
        eventId: 1

    Participant:
      title: Participant
      required:
      - email
      - ticketId
      - name
      - status
      type: object
      properties:
        participantId:
          type: integer
          format: int64
        name:
          type: string
          maxLength: 255 # Adicionado limite para o nome
        email:
          type: string
          format: email # Garante que o email seja válido
        status:
          type: string
          enum:
          - confirmado
          - pendente
        ticketId:
          type: integer
          format: int64
      example:
        participantId: 0
        name: "John Doe"
        email: "johndoe@example.com"
        status: "confirmado"
        ticketId: 6
